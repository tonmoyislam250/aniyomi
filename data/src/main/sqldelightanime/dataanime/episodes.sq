CREATE TABLE episodes(
    _id INTEGER NOT NULL PRIMARY KEY,
    anime_id INTEGER NOT NULL,
    url TEXT NOT NULL,
    name TEXT NOT NULL,
    scanlator TEXT,
    seen INTEGER AS Boolean NOT NULL,
    bookmark INTEGER AS Boolean NOT NULL,
    last_second_seen INTEGER NOT NULL,
    total_seconds INTEGER NOT NULL,
    episode_number REAL AS Float NOT NULL,
    source_order INTEGER NOT NULL,
    date_fetch INTEGER AS Long NOT NULL,
    date_upload INTEGER AS Long NOT NULL,
    FOREIGN KEY(anime_id) REFERENCES animes (_id)
    ON DELETE CASCADE
);

CREATE INDEX episodes_anime_id_index ON episodes(anime_id);
CREATE INDEX episodes_unseen_by_anime_index ON episodes(anime_id, seen) WHERE seen = 0;

getEpisodeById:
SELECT *
FROM episodes
WHERE _id = :id;

getEpisodesByAnimeId:
SELECT *
FROM episodes
WHERE anime_id = :animeId;

getBookmarkedEpisodesByAnimeId:
SELECT *
FROM episodes
WHERE bookmark
AND anime_id = :animeId;


getEpisodeByUrl:
SELECT *
FROM episodes
WHERE url = :episodeUrl;

getEpisodeByUrlAndAnimeId:
SELECT *
FROM episodes
WHERE url = :chapterUrl
AND anime_id = :animeId;

removeEpisodesWithIds:
DELETE FROM episodes
WHERE _id IN :episodeIds;

insert:
INSERT INTO episodes(anime_id,url,name,scanlator,seen,bookmark,last_second_seen,total_seconds,episode_number,source_order,date_fetch,date_upload)
VALUES (:animeId,:url,:name,:scanlator,:seen,:bookmark,:lastSecondSeen,:totalSeconds,:episodeNumber,:sourceOrder,:dateFetch,:dateUpload);

update:
UPDATE episodes
SET anime_id = coalesce(:animeId, anime_id),
    url = coalesce(:url, url),
    name = coalesce(:name, name),
    scanlator = coalesce(:scanlator, scanlator),
    seen = coalesce(:seen, seen),
    bookmark = coalesce(:bookmark, bookmark),
    last_second_seen = coalesce(:lastSecondSeen, last_second_seen),
    total_seconds = coalesce(:totalSeconds, total_seconds),
    episode_number = coalesce(:episodeNumber, episode_number),
    source_order = coalesce(:sourceOrder, source_order),
    date_fetch = coalesce(:dateFetch, date_fetch),
    date_upload = coalesce(:dateUpload, date_upload)
WHERE _id = :episodeId;

selectLastInsertedRowId:
SELECT last_insert_rowid();